/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton

Type of continuous maps and the compact-open topology on them.
-/
import topology.subset_properties
import topology.continuous_function.basic
import topology.homeomorph
import tactic.tidy

/-!
# The compact-open topology

In this file, we define the compact-open topology on the set of continuous maps between two
topological spaces.

## Main definitions

* `compact_open` is the compact-open topology on `C(Œ±, Œ≤)`. It is declared as an instance.
* `ev` is the evaluation map `C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤`. It is continuous as long as `Œ±` is locally compact.
* `coev` is the coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)`. It is always continuous.
* `continuous_map.curry` is the currying map `C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))`. This map always exists
  and it is continuous as long as `Œ± √ó Œ≤` is locally compact.
* `continuous_map.uncurry` is the uncurrying map `C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)`. For this map to
  exist, we need `Œ≤` to be locally compact. If `Œ±` is also locally compact, then this map is
  continuous.
* `homeomorph.curry` combines the currying and uncurrying operations into a homeomorphism
  `C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥))`. This homeomorphism exists if `Œ±` and `Œ≤` are locally compact.


## Tags

compact-open, curry, function space
-/

open set
open_locale topological_space

namespace continuous_map

section compact_open
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥]

def compact_open.gen (s : set Œ±) (u : set Œ≤) : set C(Œ±,Œ≤) := {f | f '' s ‚äÜ u}

-- The compact-open topology on the space of continuous maps Œ± ‚Üí Œ≤.
instance compact_open : topological_space C(Œ±, Œ≤) :=
topological_space.generate_from
  {m | ‚àÉ (s : set Œ±) (hs : is_compact s) (u : set Œ≤) (hu : is_open u), m = compact_open.gen s u}

private lemma is_open_gen {s : set Œ±} (hs : is_compact s) {u : set Œ≤} (hu : is_open u) :
  is_open (compact_open.gen s u) :=
topological_space.generate_open.basic _ (by dsimp [mem_set_of_eq]; tauto)

section functorial

variables {g : Œ≤ ‚Üí Œ≥} (hg : continuous g)

def induced (f : C(Œ±, Œ≤)) : C(Œ±, Œ≥) := ‚ü®g ‚àò f, hg.comp f.continuous‚ü©

private lemma preimage_gen {s : set Œ±} (hs : is_compact s) {u : set Œ≥} (hu : is_open u) :
  continuous_map.induced hg ‚Åª¬π' (compact_open.gen s u) = compact_open.gen s (g ‚Åª¬π' u) :=
begin
  ext ‚ü®f, _‚ü©,
  change g ‚àò f '' s ‚äÜ u ‚Üî f '' s ‚äÜ g ‚Åª¬π' u,
  rw [image_comp, image_subset_iff]
end

/-- C(Œ±, -) is a functor. -/
lemma continuous_induced : continuous (continuous_map.induced hg : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) :=
continuous_generated_from $ assume m ‚ü®s, hs, u, hu, hm‚ü©,
  by rw [hm, preimage_gen hg hs hu]; exact is_open_gen hs (hu.preimage hg)

end functorial

section ev

variables (Œ± Œ≤)
def ev (p : C(Œ±, Œ≤) √ó Œ±) : Œ≤ := p.1 p.2

variables {Œ± Œ≤}
-- The evaluation map C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤ is continuous if Œ± is locally compact.
lemma continuous_ev [locally_compact_space Œ±] : continuous (ev Œ± Œ≤) :=
continuous_iff_continuous_at.mpr $ assume ‚ü®f, x‚ü© n hn,
  let ‚ü®v, vn, vo, fxv‚ü© := mem_nhds_sets_iff.mp hn in
  have v ‚àà ùìù (f x), from mem_nhds_sets vo fxv,
  let ‚ü®s, hs, sv, sc‚ü© :=
    locally_compact_space.local_compact_nhds x (f ‚Åª¬π' v)
      (f.continuous.tendsto x this) in
  let ‚ü®u, us, uo, xu‚ü© := mem_nhds_sets_iff.mp hs in
  show (ev Œ± Œ≤) ‚Åª¬π' n ‚àà ùìù (f, x), from
  let w := set.prod (compact_open.gen s v) u in
  have w ‚äÜ ev Œ± Œ≤ ‚Åª¬π' n, from assume ‚ü®f', x'‚ü© ‚ü®hf', hx'‚ü©, calc
    f' x' ‚àà f' '' s  : mem_image_of_mem f' (us hx')
    ...       ‚äÜ v            : hf'
    ...       ‚äÜ n            : vn,
  have is_open w, from (is_open_gen sc vo).prod uo,
  have (f, x) ‚àà w, from ‚ü®image_subset_iff.mpr sv, xu‚ü©,
  mem_nhds_sets_iff.mpr ‚ü®w, by assumption, by assumption, by assumption‚ü©

end ev

section coev

variables (Œ± Œ≤)
def coev (b : Œ≤) : C(Œ±, Œ≤ √ó Œ±) := ‚ü®Œª a, (b, a), continuous.prod_mk continuous_const continuous_id‚ü©

variables {Œ± Œ≤}
lemma image_coev {y : Œ≤} (s : set Œ±) : (coev Œ± Œ≤ y) '' s = set.prod {y} s := by tidy

-- The coevaluation map Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±) is continuous (always).
lemma continuous_coev : continuous (coev Œ± Œ≤) :=
continuous_generated_from $ begin
  rintros _ ‚ü®s, sc, u, uo, rfl‚ü©,
  rw is_open_iff_forall_mem_open,
  intros y hy,
  change (coev Œ± Œ≤ y) '' s ‚äÜ u at hy,
  rw image_coev s at hy,
  rcases generalized_tube_lemma compact_singleton sc uo hy
    with ‚ü®v, w, vo, wo, yv, sw, vwu‚ü©,
  refine ‚ü®v, _, vo, singleton_subset_iff.mp yv‚ü©,
  intros y' hy',
  change (coev Œ± Œ≤ y') '' s ‚äÜ u,
  rw image_coev s,
  exact subset.trans (prod_mono (singleton_subset_iff.mpr hy') sw) vwu
end

end coev

section curry

/-- Auxiliary definition, see `continuous_map.curry` and `homeomorph.curry`. -/
def curry' (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) : C(Œ≤, Œ≥) := ‚ü®function.curry f a‚ü©

/-- If a map `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous, then its curried form `Œ± ‚Üí C(Œ≤, Œ≥)` is continuous. -/
lemma continuous_curry' (f : C(Œ± √ó Œ≤, Œ≥)) : continuous (curry' f) :=
have hf : curry' f = continuous_map.induced f.continuous_to_fun ‚àò coev _ _, by { ext, refl },
hf ‚ñ∏ continuous.comp (continuous_induced f.continuous_to_fun) continuous_coev

/-- To show continuity of a map `Œ± ‚Üí C(Œ≤, Œ≥)`, it suffices to show that its uncurried form
    `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous. -/
lemma continuous_of_continuous_uncurry (f : Œ± ‚Üí C(Œ≤, Œ≥))
  (h : continuous (function.uncurry (Œª x y, f x y))) : continuous f :=
by { convert continuous_curry' ‚ü®_, h‚ü©, ext, refl }

/-- The curried form of a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` as a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)`.
    If `a √ó Œ≤` is locally compact, this is continuous. If `Œ±` and `Œ≤` are both locally
    compact, then this is a homeomorphism, see `homeomorph.curry`. -/
def curry (f : C(Œ± √ó Œ≤, Œ≥)) : C(Œ±, C(Œ≤, Œ≥)) :=
‚ü®_, continuous_curry' f‚ü©

/-- The currying process is a continuous map between function spaces. -/
lemma continuous_curry [locally_compact_space (Œ± √ó Œ≤)] :
  continuous (curry : C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))) :=
begin
  apply continuous_of_continuous_uncurry,
  apply continuous_of_continuous_uncurry,
  rw ‚Üêhomeomorph.comp_continuous_iff' (homeomorph.prod_assoc _ _ _).symm,
  convert continuous_ev;
  tidy
end

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` is a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥`. -/
lemma continuous_uncurry_of_continuous [locally_compact_space Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) :
  continuous (function.uncurry (Œª x y, f x y)) :=
have hf : function.uncurry (Œª x y, f x y) = ev Œ≤ Œ≥ ‚àò prod.map f id, by { ext, refl },
hf ‚ñ∏ continuous.comp continuous_ev $ continuous.prod_map f.2 id.2

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` as a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` (if `Œ≤` is
    locally compact). If `Œ±` is also locally compact, then this is a homeomorphism between the two
    function spaces, see `homeomorph.curry`. -/
def uncurry [locally_compact_space Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) : C(Œ± √ó Œ≤, Œ≥) :=
‚ü®_, continuous_uncurry_of_continuous f‚ü©

/-- The uncurrying process is a continuous map between function spaces. -/
lemma continuous_uncurry [locally_compact_space Œ±] [locally_compact_space Œ≤] :
  continuous (uncurry : C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)) :=
begin
  apply continuous_of_continuous_uncurry,
  rw ‚Üêhomeomorph.comp_continuous_iff' (homeomorph.prod_assoc _ _ _),
  apply continuous.comp continuous_ev (continuous.prod_map continuous_ev id.2);
  apply_instance
end

end curry

end compact_open

end continuous_map

open continuous_map

namespace homeomorph
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥]

/-- Currying as a homeomorphism between the function spaces `C(Œ± √ó Œ≤, Œ≥)` and `C(Œ±, C(Œ≤, Œ≥))`. -/
def curry [locally_compact_space Œ±] [locally_compact_space Œ≤] : C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥)) :=
‚ü®‚ü®curry, uncurry, by tidy, by tidy‚ü©, continuous_curry, continuous_uncurry‚ü©

/-- If `Œ±` has a single element, then `Œ≤` is homeomorphic to `C(Œ±, Œ≤)`. -/
def continuous_map_of_unique [unique Œ±] : Œ≤ ‚âÉ‚Çú C(Œ±, Œ≤) :=
{ to_fun := continuous_map.induced continuous_fst ‚àò coev Œ± Œ≤,
  inv_fun := ev Œ± Œ≤ ‚àò (Œª f, (f, default Œ±)),
  left_inv := Œª a, rfl,
  right_inv := Œª f, by { ext, rw unique.eq_default x, refl },
  continuous_to_fun := continuous.comp (continuous_induced _) continuous_coev,
  continuous_inv_fun :=
    continuous.comp continuous_ev (continuous.prod_mk continuous_id continuous_const) }

@[simp] lemma continuous_map_of_unique_apply [unique Œ±] (b : Œ≤) (a : Œ±) :
  continuous_map_of_unique b a = b :=
rfl

@[simp] lemma continuous_map_of_unique_symm_apply [unique Œ±] (f : C(Œ±, Œ≤)) :
  continuous_map_of_unique.symm f = f (default Œ±) :=
rfl

end homeomorph
