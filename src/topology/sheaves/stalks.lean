/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import topology.category.Top.open_nhds
import topology.sheaves.presheaf
import category_theory.limits.types

noncomputable theory

universes v u v' u'

open category_theory
open Top
open category_theory.limits
open topological_space
open opposite

variables {C : Type u} [category.{v} C]

variables [has_colimits.{v} C]

variables {X Y Z : Top.{v}}

namespace Top.presheaf

variables (C)
/-- Stalks are functorial with respect to morphisms of presheaves over a fixed `X`. -/
def stalk_functor (x : X) : X.presheaf C ‚•§ C :=
((whiskering_left _ _ C).obj (open_nhds.inclusion x).op) ‚ãô colim

variables {C}

/--
The stalk of a presheaf `F` at a point `x` is calculated as the colimit of the functor
nbhds x ‚•§ opens F.X ‚•§ C
-/
def stalk (‚Ñ± : X.presheaf C) (x : X) : C :=
(stalk_functor C x).obj ‚Ñ± -- -- colimit ((open_nhds.inclusion x).op ‚ãô ‚Ñ±)

@[simp] lemma stalk_functor_obj (‚Ñ± : X.presheaf C) (x : X) :
  (stalk_functor C x).obj ‚Ñ± = ‚Ñ±.stalk x := rfl

/--
The germ of a section of a presheaf over an open at a point of that open.
-/
def germ (F : X.presheaf C) {U : opens X} (x : U) : F.obj (op U) ‚ü∂ stalk F x :=
colimit.Œπ ((open_nhds.inclusion x.1).op ‚ãô F) (op ‚ü®U, x.2‚ü©)

/-- For a `Type` valued presheaf, every point in a stalk is a germ. -/
lemma germ_exist (F : X.presheaf (Type v)) (x : X) (t : stalk F x) :
  ‚àÉ (U : opens X) (m : x ‚àà U) (s : F.obj (op U)), F.germ ‚ü®x, m‚ü© s = t :=
begin
  obtain ‚ü®U, s, e‚ü© := types.jointly_surjective _ (colimit.is_colimit _) t,
  revert s e,
  rw [(show U = op (unop U), from rfl)],
  generalize : unop U = V, clear U,
  cases V with V m,
  intros s e,
  exact ‚ü®V, m, s, e‚ü©,
end

lemma germ_eq (F : X.presheaf (Type v)) {U V : opens X} (x : X) (mU : x ‚àà U) (mV : x ‚àà V)
  (s : F.obj (op U)) (t : F.obj (op V))
  (h : germ F ‚ü®x, mU‚ü© s = germ F ‚ü®x, mV‚ü© t) :
  ‚àÉ (W : opens X) (m : x ‚àà W) (iU : W ‚ü∂ U) (iV : W ‚ü∂ V), F.map iU.op s = F.map iV.op t :=
begin
  erw types.filtered_colimit.colimit_eq_iff at h,
  rcases h with ‚ü®W, iU, iV, e‚ü©,
  exact ‚ü®(unop W).1, (unop W).2, iU.unop, iV.unop, e‚ü©,
end

@[simp] lemma germ_res (F : X.presheaf C) {U V : opens X} (i : U ‚ü∂ V) (x : U) :
  F.map i.op ‚â´ germ F x = germ F (i x : V) :=
let i' : (‚ü®U, x.2‚ü© : open_nhds x.1) ‚ü∂ ‚ü®V, (i x : V).2‚ü© := i in
colimit.w ((open_nhds.inclusion x.1).op ‚ãô F) i'.op

@[simp] lemma germ_res_apply (F : X.presheaf (Type v)) {U V : opens X} (i : U ‚ü∂ V)
  (x : U) (f : F.obj (op V)) :
  germ F x (F.map i.op f) = germ F (i x : V) f :=
let i' : (‚ü®U, x.2‚ü© : open_nhds x.1) ‚ü∂ ‚ü®V, (i x : V).2‚ü© := i in
congr_fun (colimit.w ((open_nhds.inclusion x.1).op ‚ãô F) i'.op) f

/-- A variant when the open sets are written in `(opens X)·µí·µñ`. -/
@[simp] lemma germ_res_apply' (F : X.presheaf (Type v)) {U V : (opens X)·µí·µñ} (i : V ‚ü∂ U)
  (x : unop U) (f : F.obj V) :
  germ F x (F.map i f) = germ F (i.unop x : unop V) f :=
let i' : (‚ü®unop U, x.2‚ü© : open_nhds x.1) ‚ü∂ ‚ü®unop V, (i.unop x : unop V).2‚ü© := i.unop in
congr_fun (colimit.w ((open_nhds.inclusion x.1).op ‚ãô F) i'.op) f

section
local attribute [instance] concrete_category.has_coe_to_sort concrete_category.has_coe_to_fun

@[ext]
lemma germ_ext {D : Type u} [category.{v} D] [concrete_category D] [has_colimits D]
  (F : X.presheaf D)
  {U V : opens X} {x : X} {hxU : x ‚àà U} {hxV : x ‚àà V}
  (W : opens X) (hxW : x ‚àà W) (iWU : W ‚ü∂ U) (iWV : W ‚ü∂ V)
  {sU : F.obj (op U)} {sV : F.obj (op V)}
  (ih : F.map iWU.op sU = F.map iWV.op sV) :
  F.germ ‚ü®x, hxU‚ü© sU = F.germ ‚ü®x, hxV‚ü© sV :=
by erw [‚Üê F.germ_res iWU ‚ü®x, hxW‚ü©,
    ‚Üê F.germ_res iWV ‚ü®x, hxW‚ü©, coe_comp, coe_comp, ih]

end

lemma stalk_hom_ext (F : X.presheaf C) {x} {Y : C} {f‚ÇÅ f‚ÇÇ : F.stalk x ‚ü∂ Y}
  (ih : ‚àÄ (U : opens X) (hxU : x ‚àà U), F.germ ‚ü®x, hxU‚ü© ‚â´ f‚ÇÅ = F.germ ‚ü®x, hxU‚ü© ‚â´ f‚ÇÇ) : f‚ÇÅ = f‚ÇÇ :=
colimit.hom_ext $ Œª U, by { op_induction U, cases U with U hxU, exact ih U hxU }

variables (C)

def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) : (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=
begin
  -- This is a hack; Lean doesn't like to elaborate the term written directly.
  transitivity,
  swap,
  exact colimit.pre _ (open_nhds.map f x).op,
  exact colim.map (whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±),
end

-- Here are two other potential solutions, suggested by @fpvandoorn at
-- <https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240>
-- However, I can't get the subsequent two proofs to work with either one.

-- def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) :
--   (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=
-- colim.map ((functor.associator _ _ _).inv ‚â´
--   whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±) ‚â´
-- colimit.pre ((open_nhds.inclusion x).op ‚ãô ‚Ñ±) (open_nhds.map f x).op

-- def stalk_pushforward (f : X ‚ü∂ Y) (‚Ñ± : X.presheaf C) (x : X) :
--   (f _* ‚Ñ±).stalk (f x) ‚ü∂ ‚Ñ±.stalk x :=
-- (colim.map (whisker_right (nat_trans.op (open_nhds.inclusion_map_iso f x).inv) ‚Ñ±) :
--   colim.obj ((open_nhds.inclusion (f x) ‚ãô opens.map f).op ‚ãô ‚Ñ±) ‚ü∂ _) ‚â´
-- colimit.pre ((open_nhds.inclusion x).op ‚ãô ‚Ñ±) (open_nhds.map f x).op

namespace stalk_pushforward
local attribute [tidy] tactic.op_induction'

@[simp] lemma id (‚Ñ± : X.presheaf C) (x : X) :
  ‚Ñ±.stalk_pushforward C (ùüô X) x = (stalk_functor C x).map ((pushforward.id ‚Ñ±).hom) :=
begin
  dsimp [stalk_pushforward, stalk_functor],
  ext1,
  tactic.op_induction',
  cases j, cases j_val,
  rw [colimit.Œπ_map_assoc, colimit.Œπ_map, colimit.Œπ_pre, whisker_left_app, whisker_right_app,
       pushforward.id_hom_app, eq_to_hom_map, eq_to_hom_refl],
  dsimp,
  -- FIXME A simp lemma which unfortunately doesn't fire:
  erw [category_theory.functor.map_id],
end

-- This proof is sadly not at all robust:
-- having to use `erw` at all is a bad sign.
@[simp] lemma comp (‚Ñ± : X.presheaf C) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : X) :
  ‚Ñ±.stalk_pushforward C (f ‚â´ g) x =
  ((f _* ‚Ñ±).stalk_pushforward C g (f x)) ‚â´ (‚Ñ±.stalk_pushforward C f x) :=
begin
  dsimp [stalk_pushforward, stalk_functor],
  ext U,
  op_induction U,
  cases U,
  cases U_val,
  simp only [colimit.Œπ_map_assoc, colimit.Œπ_pre_assoc,
             whisker_right_app, category.assoc],
  dsimp,
  -- FIXME: Some of these are simp lemmas, but don't fire successfully:
  erw [category_theory.functor.map_id, category.id_comp, category.id_comp, category.id_comp,
       colimit.Œπ_pre, colimit.Œπ_pre],
  refl,
end

end stalk_pushforward
end Top.presheaf
