/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Yury Kudryashov
-/
import topology.metric_space.emetric_space

/-!
# `GŒ¥` sets

In this file we define `GŒ¥` sets and prove their basic properties.

## Main definitions

* `is_GŒ¥`: a set `s` is a `GŒ¥` set if it can be represented as an intersection
  of countably many open sets;

* `residual`: the filter of residual sets. A set `s` is called *residual* if it includes a dense
  `GŒ¥` set. In a Baire space (e.g., in a complete (e)metric space), residual sets form a filter.

  For technical reasons, we define `residual` in any topological space but the definition agrees
  with the description above only in Baire spaces.

## Main results

We prove that finite or countable intersections of GŒ¥ sets is a GŒ¥ set. We also prove that the
continuity set of a function from a topological space to an (e)metric space is a GŒ¥ set.

## Tags

GŒ¥ set, residual set
-/

noncomputable theory
open_locale classical topological_space filter

open filter encodable set

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

section is_GŒ¥
variable [topological_space Œ±]

/-- A GŒ¥ set is a countable intersection of open sets. -/
def is_GŒ¥ (s : set Œ±) : Prop :=
  ‚àÉT : set (set Œ±), (‚àÄt ‚àà T, is_open t) ‚àß countable T ‚àß s = (‚ãÇ‚ÇÄ T)

/-- An open set is a GŒ¥ set. -/
lemma is_open.is_GŒ¥ {s : set Œ±} (h : is_open s) : is_GŒ¥ s :=
‚ü®{s}, by simp [h], countable_singleton _, (set.sInter_singleton _).symm‚ü©

lemma is_GŒ¥_univ : is_GŒ¥ (univ : set Œ±) := is_open_univ.is_GŒ¥

lemma is_GŒ¥_bInter_of_open {I : set Œπ} (hI : countable I) {f : Œπ ‚Üí set Œ±}
  (hf : ‚àÄi ‚àà I, is_open (f i)) : is_GŒ¥ (‚ãÇi‚ààI, f i) :=
‚ü®f '' I, by rwa ball_image_iff, hI.image _, by rw sInter_image‚ü©

lemma is_GŒ¥_Inter_of_open [encodable Œπ] {f : Œπ ‚Üí set Œ±}
  (hf : ‚àÄi, is_open (f i)) : is_GŒ¥ (‚ãÇi, f i) :=
‚ü®range f, by rwa forall_range_iff, countable_range _, by rw sInter_range‚ü©

/-- A countable intersection of GŒ¥ sets is a GŒ¥ set. -/
lemma is_GŒ¥_sInter {S : set (set Œ±)} (h : ‚àÄs‚ààS, is_GŒ¥ s) (hS : countable S) : is_GŒ¥ (‚ãÇ‚ÇÄ S) :=
begin
  choose T hT using h,
  refine ‚ü®_, _, _, (sInter_bUnion (Œª s hs, (hT s hs).2.2)).symm‚ü©,
  { simp only [mem_Union],
    rintros t ‚ü®s, hs, tTs‚ü©,
    exact (hT s hs).1 t tTs },
  { exact hS.bUnion (Œªs hs, (hT s hs).2.1) },
end

lemma is_GŒ¥_Inter [encodable Œπ]  {s : Œπ ‚Üí set Œ±} (hs : ‚àÄ i, is_GŒ¥ (s i)) : is_GŒ¥ (‚ãÇ i, s i) :=
is_GŒ¥_sInter (forall_range_iff.2 hs) $ countable_range s

lemma is_GŒ¥_bInter {s : set Œπ} (hs : countable s) {t : Œ† i ‚àà s, set Œ±}
  (ht : ‚àÄ i ‚àà s, is_GŒ¥ (t i ‚Äπ_‚Ä∫)) : is_GŒ¥ (‚ãÇ i ‚àà s, t i ‚Äπ_‚Ä∫) :=
begin
  rw [bInter_eq_Inter],
  haveI := hs.to_encodable,
  exact is_GŒ¥_Inter (Œª x, ht x x.2)
end

lemma is_GŒ¥.inter {s t : set Œ±} (hs : is_GŒ¥ s) (ht : is_GŒ¥ t) : is_GŒ¥ (s ‚à© t) :=
by { rw inter_eq_Inter, exact is_GŒ¥_Inter (bool.forall_bool.2 ‚ü®ht, hs‚ü©) }

/-- The union of two GŒ¥ sets is a GŒ¥ set. -/
lemma is_GŒ¥.union {s t : set Œ±} (hs : is_GŒ¥ s) (ht : is_GŒ¥ t) : is_GŒ¥ (s ‚à™ t) :=
begin
  rcases hs with ‚ü®S, Sopen, Scount, rfl‚ü©,
  rcases ht with ‚ü®T, Topen, Tcount, rfl‚ü©,
  rw [sInter_union_sInter],
  apply is_GŒ¥_bInter_of_open (Scount.prod Tcount),
  rintros ‚ü®a, b‚ü© hab,
  exact is_open_union (Sopen a hab.1) (Topen b hab.2)
end

end is_GŒ¥

section continuous_at

open topological_space
open_locale uniformity

variables [topological_space Œ±]

lemma is_GŒ¥_set_of_continuous_at_of_countably_generated_uniformity
  [uniform_space Œ≤] (hU : is_countably_generated (ùì§ Œ≤)) (f : Œ± ‚Üí Œ≤) :
  is_GŒ¥ {x | continuous_at f x} :=
begin
  rcases hU.exists_antimono_subbasis uniformity_has_basis_open_symmetric with ‚ü®U, hUo, hU‚ü©,
  simp only [uniform.continuous_at_iff_prod, nhds_prod_eq],
  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.to_has_basis, forall_prop_of_true,
    set_of_forall, id],
  refine is_GŒ¥_Inter (Œª k, is_open.is_GŒ¥ $ is_open_iff_mem_nhds.2 $ Œª x, _),
  rintros ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©,
  filter_upwards [mem_nhds_sets hso hsx],
  intros y hy,
  exact ‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©
end

/-- The set of points where a function is continuous is a GŒ¥ set. -/
lemma is_GŒ¥_set_of_continuous_at [emetric_space Œ≤] (f : Œ± ‚Üí Œ≤) :
  is_GŒ¥ {x | continuous_at f x} :=
is_GŒ¥_set_of_continuous_at_of_countably_generated_uniformity
  emetric.uniformity_has_countable_basis _

end continuous_at

/-- A set `s` is called *residual* if it includes a dense `GŒ¥` set. If `Œ±` is a Baire space
(e.g., a complete metric space), then residual sets form a filter, see `mem_residual`.

For technical reasons we define the filter `residual` in any topological space but in a non-Baire
space it is not useful because it may contain some non-residual sets. -/
def residual (Œ± : Type*) [topological_space Œ±] : filter Œ± :=
‚®Ö t (ht : is_GŒ¥ t) (ht' : dense t), ùìü t
